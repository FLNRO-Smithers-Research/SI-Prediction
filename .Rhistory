Spp_count2 <- SS_SI2 %>%
group_by(Spp) %>%
summarise(count = n())
View(Spp_count2)
Spp.list <- Spp_count2$Spp [Spp_count2$count >5] ###list of species where there are more than 5 values
########## create 2 merged data sets. One where site index data is available and one where it is not.
SS_wSibec <- sibecOrig [(sibecOrig$PlotCountSpp > 0),]
SS_wSibec <- na.omit (SS_wSibec)
# SS_wSibec <- sibecOrig
SS_SI <- SS_wSibec [,c(9,5,7) ]
colnames (SS_SI) [1:3] <- c("Unit", "Spp", "SI")
SS_SI2 <- merge (SS_SI, SSSuit_Data, by = c("Unit","Spp"))
SS_SI2 <- distinct(SS_SI2)
Spp_count2 <- SS_SI2 %>%
group_by(Spp) %>%
summarise(count = n())
View(Spp_count2)
Spp.list <- Spp_count2$Spp [Spp_count2$count >10] ###list of species where there are more than 5 values
###No sibec data - SHould be all site series. Where species does not occur then Site Index is 0
SS_noSibec <- sibecOrig [is.na(sibecOrig$PlotCountSpp),]
SS_SInew <- SS_noSibec [,c(9,5,7) ]
colnames (SS_SInew) [1:3] <- c("Unit", "Spp", "SI")
SS_SInew2 <- merge (SS_SInew, SSSuit_Data, by = c("Unit","Spp"))
SS_SInew2 <- distinct(SS_SInew2)
Spp.list
Spp <- "Pl"
options(stringsAsFactors = FALSE)
SI_Spp <- SS_SI2 [(SS_SI2$Spp %in% Spp), ]
View(SS_SI)
View(SI_Spp)
SI_Units <- SI_Spp[, c(4,1,2,5)]
SI_Spp <- SI_Spp[, -c(4,1,2,5)]
View(SI_Spp)
rF.fit <- randomForest(SI ~ .,data=SI_Spp, nodesize = 2,
do.trace = 10, ntree=201, na.action=na.fail, importance=TRUE, proximity=TRUE)
View(SS_noSibec)
View(SS_SInew2)
SS_wSibec <- sibecOrig
SS_SI <- SS_wSibec [,c(9,5,7) ]
colnames (SS_SI) [1:3] <- c("Unit", "Spp", "SI")
SS_SI2 <- merge (SS_SI, SSSuit_Data, by = c("Unit","Spp"))
SS_SI2 <- distinct(SS_SI2)
Spp_count2 <- SS_SI2 %>%
group_by(Spp) %>%
summarise(count = n())
Spp.list <- Spp_count2$Spp [Spp_count2$count >10] ###list of species where there are more than 5 values
Spp = "Pl"
SI_Spp <- SS_SI2 [(SS_SI2$Spp %in% Spp), ]
View(rF.fit)
View(SI_Spp)
sample.data.frame
?sample]
?sample
View(SI_Spp)
ind <- sample(rownames(SI_Spp), size = nrows(SI_Spp)/3)
ind <- sample(rownames(SI_Spp), size = nrow(SI_Spp)/3)
View(SI_Spp)
rownames(SI_Spp) <- NULL
ind <- sample(rownames(SI_Spp), size = nrow(SI_Spp)/3)
test <- SI_Spp[ind,]
train <- SI_Spp[!ind,]
train <- SI_Spp[!rownames(SI_Spp) %in% ind,]
View(SI_Spp)
SI_Spp <- SI_Spp[,-c(4,1,2,5)]
rownames(SI_Spp) <- NULL
ind <- sample(rownames(SI_Spp), size = nrow(SI_Spp)/3)
test <- SI_Spp[ind,]
train <- SI_Spp[!rownames(SI_Spp) %in% ind,]
View(train)
rF.fit <- randomForest(SI ~ .,data=train, nodesize = 2,
do.trace = 10, ntree=201, na.action=na.fail, importance=TRUE, proximity=TRUE)
options(java.parameters = "-Xmx5g")
library(bartMachine)
bartMachineCV(train[,-1],train$SI)
bF.fit <- bartMachine(train[,-1],train$SI, k = 2, nu = 3, q = 0.99, num_trees = 200)
test$RFPred <- predict(rF.fit, test[,-1])
View(test)
test$BFPred <- predict(bF.fit, test[,-c(1,ncol(test))])
View(test)
t2 <- test[,c("SI","RFPred","BFPred")]
View(t2)
plot(BFPred~SI, data = t2)
plot(RFPred~SI, data = t2)
anova(lm(BFPred~SI, data = t2))
anova(lm(RFPred~SI, data = t2))
cor.test(t2$BFPred,t2$SI)
cor.test(t2$RFPred,t2$SI)
ibrary(RPostgreSQL)
library(data.tree)
library(data.table)
library(collapsibleTree)
library(RPostgreSQL)
library(rhandsontable)
hierTable <- read.csv("C:/Users/Kiri Daust/Desktop/Vegetation_Classification/FormTemplate.csv")
hierTable <- read.csv("C:/Users/Kiri Daust/Desktop/Vegetation_Classification/FormTemplate.csv")
View(hierTable)
hierTable <- read.csv("C:/Users/Kiri Daust/Desktop/Vegetation_Classification/FormTemplate.csv", header = F)
View(hierTable)
rhandsontable(hierTable)
?read.csv
hierTable <- read.csv("C:/Users/Kiri Daust/Desktop/Vegetation_Classification/FormTemplate.csv", header = F, stringsAsFactors = F)
rhandsontable(hierTable)
View(hierTable)
rhandsontable(hierTable) %>%
hot_row(3, col = "red")
rhandsontable(hierTable) %>%
hot_row(3, color = "red")
rhandsontable(hierTable) %>%
hot_row(3, fill = "red")
library(htmlwidgets)
rhandsontable(hierTable) %>%
hot_row(3, renderer = htmlwidgets::JS("style.backgroundColor = \"#EEE\""))
rhandsontable(hierTable) %>%
hot_row(3, renderer = htmlwidgets::JS("cell.style.backgroundColor = \"#EEE\""))
shiny::runGitHub("rhandsontable", "jrowen", subdir = "inst/examples/rhandsontable_corr")
install.packages("metricsgraphics")
shiny::runGitHub("rhandsontable", "jrowen", subdir = "inst/examples/rhandsontable_corr")
?hot_row
rhandsontable(hierTable) %>%
hot_row(3, renderer = "function (instance, td, row, col, prop, value, cellProperties) {
Handsontable.renderers.TextRenderer.apply(this, arguments);
td.style.background = 'lightgreen';
}")
rhandsontable(hierTable, selectCallback = TRUE) %>%
hot_row(3, renderer = "function (instance, td, row, col, prop, value, cellProperties) {
Handsontable.renderers.TextRenderer.apply(this, arguments);
td.style.background = 'lightgreen';
}")
rhandsontable(hierTable, selectCallback = TRUE) %>%
hot_cols(renderer = "function (instance, td, row, col, prop, value, cellProperties) {
Handsontable.renderers.TextRenderer.apply(this, arguments);
if(row == 3){
td.style.background = 'lightgreen';
}
}")
rhandsontable(hierTable, selectCallback = TRUE) %>%
hot_cols(renderer = "function (instance, td, row, col, prop, value, cellProperties) {
Handsontable.renderers.TextRenderer.apply(this, arguments);
if(row == 2 || row == 9){
td.style.background = 'red';
}
}")
hot_cols
?hot_cols
rhandsontable(hierTable, selectCallback = TRUE) %>%
hot_cols(renderer = "function (instance, td, row, col, prop, value, cellProperties) {
Handsontable.renderers.TextRenderer.apply(this, arguments);
if(row == 2 || row == 9){
td.style.background = 'red';
}
}")
rhandsontable(hierTable, selectCallback = TRUE) %>%
hot_cols(renderer = "function (instance, td, row, col, prop, value, cellProperties) {
Handsontable.renderers.TextRenderer.apply(this, arguments);
if(row == 2 || row == 9){
if(col < 6){
td.style.background = 'red';
}else{
td.style.background = 'purple';
}
}else if(value){
td.style.background = 'lightgreen';
}
}")
require (RGtk2)
require(plyr)
require (rChoiceDialogs)
require (data.table)
require(doBy)
require (utils)
require(labdsv)
require(tools )
require(svDialogs)
require(tcltk)
require(randomForest)
require(foreach)
require(dplyr)
require(reshape2)
require(reshape)
require(doParallel)
require(caret)
require(C50)
require (stringr)
require(UBL)
require(dostats)
require(ordinalForest)
wd=tk_choose.dir(); setwd(wd)
#################Import and Build Tree species suitability##############
#ESuit <- read.csv("1_BC_TreeSpp_ESuit_v11_9.csv",stringsAsFactors=FALSE)
#ESuit2 <- read.csv ("2_US_TreeSpp_ESuit_v11_4.csv",stringsAsFactors=FALSE)
#ESuit3 <- read.csv ("3_Alberta_TreeSpp_ESuit_v11.csv",stringsAsFactors=FALSE)
#ESuit4 <- read.csv ("Nelson_v11_6_TreeSpp_Suit.csv",stringsAsFactors=FALSE)
##ESuit <- rbind (ESuit, ESuit2)
#ESuit <- rbind (ESuit, ESuit3)
ESuit <- read.csv ("TreeSpp_ESuit_v11_15.csv",stringsAsFactors=FALSE)
#ESuit <- ESuit[-1]
ESuit <- ESuit %>% distinct()
View(ESuit)
#ESuitnew <- read.csv("Nelsonv11_4_TreeSpp_Suit.csv",stringsAsFactors=FALSE)
ESuit$ESuit <- paste ("E", ESuit$ESuit, sep = "")
#allDat3 <- allDat3[-4]#; temp2 <- temp2[-3]
#temp <- allDat[,grep("CMD",colnames(allDat))]
###work on checking for excess summer moister leading to Moist zonal sites
#temp2 <- allDat[,grep("PPT0", colnames(allDat))]
#temp2 <- allDat[c("ID1", "ID2", "Tmax07","MSP","PPT06","DD5","FFP", "CMD", "MWMT", "MCMT" )]
#State = "All"
#temp2 <- rbind (allDat1, allDat2)
#temp2 <- rbind (temp2, allDat3)
#temp2 <- temp2[-1]
#temp2 <- temp2[temp2$ID2 != "",]
temp2 <- fread("LHC_Training_ALLBGC_21VARS.csv", data.table = FALSE,stringsAsFactors=FALSE)
View(temp2)
colnames (temp2)[2] <- "BGC"
temp2 <- temp2[-1]
CMD <- aggregate( CMD ~ BGC, temp2, mean) ##
meanVar <-aggregate( . ~ BGC, temp2, mean)
SS_Var <- merge(ESuit, meanVar, by = "BGC")
#write.csv (SS_Var, "TreeSuit_Climate.csv")
#SS_Var$BGC <- as.factor(SS_Var$BGC)
#SS_Var$ESuit <- as.factor(SS_Var$ESuit)
SS_Var$Spp [is.na(SS_Var$Spp)] <- "X" ### where no treespecies suitable create a no-species code 'X'
aSMRrSMR="modelled_ALLv11_rSMR_aSMR_grid_HalfStep.csv"
aSMR <-read.csv(aSMRrSMR,stringsAsFactors=FALSE,na.strings=".")
View(aSMR)
aSMR <- aSMR[-1]
colnames(aSMR) <- c("BGC","0","1","2","3","4","5","6","7")
aSMR.list <- melt(aSMR)
aSMR.list$EDA <- paste (aSMR.list$BGC, "_", aSMR.list$variable)
aSMR.list <- aSMR.list [,-c(1:2)]
edatopename="Edatopic_v11_5"
edatopename2=paste(wd,"/",edatopename,".csv",sep="")
E1 <-read.csv(edatopename2,stringsAsFactors=FALSE,na.strings= c("", "NA"))
#E2 <- E1 %>% distinct()
#write.csv (E2, "Edatopic_v11.2.csv")
#E1 <- E1[,-c(5)]
#E1 <- E1 [is.na (E1$Codes),]### removes site series flagged with special condition
E1 <- unique(E1)
Codes <- unique (E1[,c(3,6)])
colnames (Codes) [1] <- "Unit"
###for each wetter rSMR, previous CMD is divided by 2
for (i in 1:3){
CMD[,2+i] <- CMD[,1+i]/2
}
colnames(CMD) <- c("BGC","4","5","6","7")
CMD <- CMD[,c(1,3:5,2)]
###for each drier rSMR, previous CMD + 100
for (i in 1:4){
CMD[,length(CMD)+1] <- CMD[,length(CMD)] + 100
}
colnames(CMD)[6:9] <- c("3","2","1","0")
CMD <- CMD[,order(colnames(CMD))]## creates full grid of CMD values by BGC by rSMR class
CMD.list <- melt(CMD)
#######needs to get rid of blank BGC
CMD.list$EDA <- paste (CMD.list$BGC, "_", CMD.list$variable)
CMD.list <- CMD.list[,-c(1:2)]
E1$SNR <-str_sub(E1$Edatopic, 1,1)
E1$rSMR <-str_sub(E1$Edatopic, -1,-1)
E1$EDA <- paste (E1$MergedBGC, "_", E1$rSMR)
E1_sub <- E1 [E1$EDA %in% CMD.list$EDA,]
E1_sub <- merge (E1_sub, CMD.list, by = "EDA")
names(E1_sub) [10] <- "EdaCMD"
E1_sub$EdaCMD <- as.numeric(E1_sub$EdaCMD)
#E1_sub$SNR <- as.factor(E1_sub$SNR)
E1_sub$SNR_num <- E1_sub$SNR%>% str_replace_all(c("A" = "1", "B" = "2", "C" = "3", "D" = "4" ,"E" = "5" ))
E1_sub$SNR_num <- as.numeric(E1_sub$SNR_num)
View(E1_sub)
E1_sub <- merge (E1_sub, aSMR.list, by = "EDA")
colnames (E1_sub)[12] <- "aSMR"
E1_sub <- E1_sub [, c("SS_NoSpace", "EdaCMD", "SNR_num", "aSMR")]#
E1_sub <- E1_sub %>% distinct()
E1_sub$SS_NoSpace <- as.character(E1_sub$SS_NoSpace)
View(E1_sub)
SS_data <- E1_sub[-1] %>% group_by(E1_sub$SS_NoSpace) %>% summarise_all(list(~min(.),~mean(.),~max(.)))###ignore warning
View(SS_data)
View(CMD)
View(aSMR.list)
View(E1)
View(CMD)
View(CMD.list)
View(temp2)
View(CMD)
CMD <- aggregate( CMD ~ BGC, temp2, mean) ##
View(CMD)
###for each wetter rSMR, previous CMD is divided by 2
for (i in 1:3){
CMD[,2+i] <- CMD[,1+i]/2
}
View(CMD)
colnames(CMD) <- c("BGC","4","5","6","7")
CMD <- CMD[,c(1,3:5,2)]
###for each drier rSMR, previous CMD + 100
for (i in 1:4){
CMD[,length(CMD)+1] <- CMD[,length(CMD)] + 100
}
colnames(CMD)[6:9] <- c("3","2","1","0")
CMD <- CMD[,order(colnames(CMD))]## creates full grid of CMD values by BGC by rSMR class
View(CMD)
CMD.list <- melt(CMD)
View(CMD.list)
#######needs to get rid of blank BGC
CMD.list$EDA <- paste (CMD.list$BGC, "_", CMD.list$variable)
View(CMD.list)
CMD.list <- CMD.list[,-c(1:2)]
E1 <-read.csv(edatopename2,stringsAsFactors=FALSE,na.strings= c("", "NA"))
View(E1)
#E2 <- E1 %>% distinct()
#write.csv (E2, "Edatopic_v11.2.csv")
#E1 <- E1[,-c(5)]
#E1 <- E1 [is.na (E1$Codes),]### removes site series flagged with special condition
E1 <- unique(E1)
Codes <- unique (E1[,c(3,6)])
View(Codes)
View(E1)
E1$SNR <-str_sub(E1$Edatopic, 1,1)
E1$rSMR <-str_sub(E1$Edatopic, -1,-1)
E1$EDA <- paste (E1$MergedBGC, "_", E1$rSMR)
E1_sub <- E1 [E1$EDA %in% CMD.list$EDA,]
View(E1_sub)
E1_sub <- merge (E1_sub, CMD.list, by = "EDA")
names(E1_sub) [10] <- "EdaCMD"
E1_sub$EdaCMD <- as.numeric(E1_sub$EdaCMD)
#E1_sub$SNR <- as.factor(E1_sub$SNR)
E1_sub$SNR_num <- E1_sub$SNR%>% str_replace_all(c("A" = "1", "B" = "2", "C" = "3", "D" = "4" ,"E" = "5" ))
E1_sub$SNR_num <- as.numeric(E1_sub$SNR_num)
View(aSMR.list)
###########Create full SIBEC Predict Data set from BART model###########
setwd("C:/Users/Kiri Daust/Desktop/SI-Prediction")
sibecOrig <- read.csv("SIBECDatRaw.csv")
climDat <- fread("BECv11_750Pt_FiveYr_2011_2015MSY.csv", data.table = F)
View(climDat)
climDat <- climDat[climDat$Eref_sm > -1000,]
climDat <- climDat[,c("ID2","CMD","FFP","Eref_sm","MCMT","SHM","TD","PAS","DD5_sp","MSP")]
climDat <- climDat[,c("ID2","CMD","FFP","Eref_sm","MCMT","SHM","TD","PAS","DD5_sp","MSP")] %>% set_colnames(.[1],"BGC")
library(magrittr)
climDat <- climDat[,c("ID2","CMD","FFP","Eref_sm","MCMT","SHM","TD","PAS","DD5_sp","MSP")] %>% set_colnames(.[1],"BGC")
?set_colnames
climDat <- climDat[,c("ID2","CMD","FFP","Eref_sm","MCMT","SHM","TD","PAS","DD5_sp","MSP")] %>% set_colnames("BGC")
View(climDat)
climDat <- climDat[,c("ID2","CMD","FFP","Eref_sm","MCMT","SHM","TD","PAS","DD5_sp","MSP")] %>% set_colnames(1,"BGC")
climDat <- fread("BECv11_750Pt_FiveYr_2011_2015MSY.csv", data.table = F)
climDat <- climDat[climDat$Eref_sm > -1000,]
climDat <- climDat[,c("ID2","CMD","FFP","Eref_sm","MCMT","SHM","TD","PAS","DD5_sp","MSP")]
colnames(climDat)[1] <- "BGC"
climAve <- climDat %>%
group_by(BGC) %>%
summarise_all(mean, na.rm = T)
View(climAve)
climCMD <- climAve[,c("BGC","CMD")]
CMD <- climAve[,c("BGC","CMD")]
View(CMD)
for (i in 1:3){
CMD[,2+i] <- CMD[,1+i]/2
}
View(CMD)
colnames(CMD) <- c("BGC","4","5","6","7")
CMD <- CMD[,c(1,3:5,2)]
###for each drier rSMR, previous CMD + 100
for (i in 1:4){
CMD[,length(CMD)+1] <- CMD[,length(CMD)] + 100
}
colnames(CMD)[6:9] <- c("3","2","1","0")
CMD <- CMD[,order(colnames(CMD))]## creates full grid of CMD values by BGC by rSMR class
View(CMD)
View(CMD)
CMD <- melt(CMD, id.vars = "BGC")
View(CMD)
View(CMD)
CMD <- melt(CMD)
CMD <- as.data.frame(CMD)
CMD <- melt(CMD)
View(CMD)
colnames(CMD) <- c("BGC","rSMR","EdaCMD")
eda <- read.csv("Edatopic_v11.0.csv")
eda <- eda[eda$Codes == "",]
eda <- eda[,-c(5,6)]
View(eda)
View(SS_data)
View(E1_sub)
####Read in aSMR x rSMR matrix (produced from aSMR x rSMR script and edited)
SMR <- load("rSMR_aSMR_CalcList.RData")
#SppList ="Bc"
Eda <- read.csv("Edatopic_v11.0.csv")
colnames(SMRCross) <- c("BGC", "rSMR", "aSMR")
SMRCross$rSMR <- gsub("[[:alpha:]]","", SMRCross$rSMR)
SMRCross$aSMR <- round(SMRCross$aSMR, digits = 0)
sibecOrig <- read.xlsx("SIBEC_for_Portfolio2.xlsx", sheet = 1) ###import actual SI values
#####Pull in climatic and site data for each siteseries species in sibecOrig (pull from suitability script)
SSSuit_Data <- read.csv ("SSnewSuit_Data.csv")
#Harmonize the species labelling in both data sets. Sx for all interior spruce, Pl, Cw, Fd
SSSuit_Data$Spp <- dplyr::recode(SSSuit_Data$Spp, Cwc="Cw", Fdc = "Fd", Se = "Sx", Sw = "Sx", Plc = "Pl", Bgc = "Bg")
sibecOrig$TreeSpp <- dplyr::recode(sibecOrig$TreeSpp, Cwc="Cw", Fdc = "Fd", Se = "Sx", Sw = "Sx", Plc = "Pl", Bgc = "Bg")
library(openxlsx)
sibecOrig <- read.xlsx("SIBEC_for_Portfolio2.xlsx", sheet = 1) ###import actual SI values
#####Pull in climatic and site data for each siteseries species in sibecOrig (pull from suitability script)
SSSuit_Data <- read.csv ("SSnewSuit_Data.csv")
#Harmonize the species labelling in both data sets. Sx for all interior spruce, Pl, Cw, Fd
SSSuit_Data$Spp <- dplyr::recode(SSSuit_Data$Spp, Cwc="Cw", Fdc = "Fd", Se = "Sx", Sw = "Sx", Plc = "Pl", Bgc = "Bg")
sibecOrig$TreeSpp <- dplyr::recode(sibecOrig$TreeSpp, Cwc="Cw", Fdc = "Fd", Se = "Sx", Sw = "Sx", Plc = "Pl", Bgc = "Bg")
SS_wSibec <- sibecOrig
SS_SI <- SS_wSibec [,c(9,5,7) ]
colnames (SS_SI) [1:3] <- c("Unit", "Spp", "SI")
SS_SI2 <- merge (SS_SI, SSSuit_Data, by = c("Unit","Spp"))
SS_SI2 <- distinct(SS_SI2)
Spp_count2 <- SS_SI2 %>%
group_by(Spp) %>%
summarise(count = n())
Spp.list <- Spp_count2$Spp [Spp_count2$count >10] ###list of species where there are more than 5 values
SS_SI2 <- SS_SI2[!is.na(SS_SI2$SI),]
View(SS_SI2)
colnames(SS_SI2)
View(eda)
climAve <- merge(eda[,-1], climAve, by.x = "MergedBGC", by.y = "BGC", all = T)
View(climAve)
climAve <- climAve[!is.na(climAve$CMD),]
View(climAve)
climAve$SNR <- str_sub(climAve$Edatopic, 1,1) %>% str_replace_all(c("A" = "1", "B" = "2", "C" = "3", "D" = "4" ,"E" = "5" ))
climAve$rSMR <-str_sub(climAve$Edatopic, -1,-1)
View(climAve)
View(climAve)
climAve <- merge(climAve, CMD, by.x = c("MergedBGC","rSMR"), by.y = c("BGC","rSMR"), all = TRUE)
View(climAve)
View(climAve)
getwd()
suitTbl <- read.csv("TreeSpp_ESuit_v11_16.csv")
View(suitTbl)
suitTbl <- suitTbl[,c("Unit","Spp","ESuit")]
climAve <- merge(climAve, suitTbl, by.x = "SS_NoSpace", by.y = "Unit", all.x = T, all.y = F)
View(climAve)
runApp('C:/Users/Kiri Daust/Desktop/BGC_Climates_Shiny')
runApp('C:/Users/Kiri Daust/Desktop/BGC_Climates_Shiny')
runApp('C:/Users/Kiri Daust/Desktop/BGC_Climates_Shiny')
View(climAve)
View(SS_SI2)
View(aSMR)
getwd()
##add in aSMR modelled data
aSMRrSMR="modelled_ALLv11_rSMR_aSMR_grid_HalfStep.csv"
aSMR <-read.csv(aSMRrSMR,stringsAsFactors=FALSE,na.strings=".")
aSMR <- aSMR[-1]
colnames(aSMR) <- c("BGC","0","1","2","3","4","5","6","7")
aSMR.list <- melt(aSMR)
View(aSMR.list)
colnames(aSMR.list)[2:3] <- c("rSMR","aSMR")
climAve <- merge(climAve,aSMR.list, by.x = c("MergedBGC","rSMR"),by.y = c("BGC","rSMR"), all.x = TRUE)
SSVars <- climAve %>%
group_by(SS_NoSpace) %>%
summarise_at(c("rSMR","aSMR","SNR","EdaCMD"), .funs = list(~min(.),~mean(.),~max(.))) %>%
ungroup()
warnings()
View(SSVars)
SSVars <- climAve %>%
group_by(SS_NoSpace) %>%
summarise_at(c("rSMR","aSMR","SNR","EdaCMD"), .funs = list(~min(.),~mean(as.numeric(.),na.rm = T),~max(.))) %>%
ungroup()
climAve <- climAve[!is.na(climAve$SS_NoSpace),]
SSVars <- climAve %>%
group_by(SS_NoSpace) %>%
summarise_at(c("rSMR","aSMR","SNR","EdaCMD"), .funs = list(~min(.),~mean(as.numeric(.),na.rm = T),~max(.))) %>%
ungroup()
View(SSVars)
SSVars <- climAve %>%
group_by(SS_NoSpace) %>%
summarise_at(c("aSMR","SNR","EdaCMD"), .funs = list(~min(.),~mean(as.numeric(.),na.rm = T),~max(.))) %>%
ungroup()
View(SSVars)
View(climAve)
climVars <- climAve[,c("SS_NoSpace","MergedBGC","Spp","ESuit","CMD","FFP","Eref_sm","MCMT","SHM","TD","PAS","DD5_sp","MSP")] %>%
unique()
View(climVars)
climVars <- climVars[!is.na(climVars$Spp),]
View(climVars)
View(SSVars)
finalDat <- merge(climVars,SSVars,by = "SS_NoSpace", all.x = T)
View(finalDat)
dput(colnames(SS_SI2))
colnames(finalDat) <- c("Unit", "BGC", "Spp", "ESuit", "CMD", "FFP", "Eref_sm",
"MCMT", "SHM", "TD", "PAS", "DD5_sp", "MSP", "aSMR_min", "SNR_num_min", "EdaCMD_min",
"aSMR_mean","SNR_num_mean", "EdaCMD_mean", "aSMR_max", "SNR_num_max","EdaCMD_max")
write.csv(finalDat,"BartInputDat.csv", row.names = F)
str(finalDat)
######################################################################################################
finalDat <- mutate(finalDat, SNR_num_min = as.numeric(SNR_num_min), SNR_num_max = as.numeric(SNR_num_max))
View(finalDat)
View(SS_SI2)
sibecOrig <- read.xlsx("SIBEC_for_Portfolio2.xlsx", sheet = 1) ###import actual SI values
#####Pull in climatic and site data for each siteseries species in sibecOrig (pull from suitability script)
SSSuit_Data <- finalDat
#Harmonize the species labelling in both data sets. Sx for all interior spruce, Pl, Cw, Fd
SSSuit_Data$Spp <- dplyr::recode(SSSuit_Data$Spp, Cwc="Cw", Fdc = "Fd", Se = "Sx", Sw = "Sx", Plc = "Pl", Bgc = "Bg")
sibecOrig$TreeSpp <- dplyr::recode(sibecOrig$TreeSpp, Cwc="Cw", Fdc = "Fd", Se = "Sx", Sw = "Sx", Plc = "Pl", Bgc = "Bg")
SS_wSibec <- sibecOrig
SS_SI <- SS_wSibec [,c(9,5,7) ]
colnames (SS_SI) [1:3] <- c("Unit", "Spp", "SI")
SS_SI2 <- merge (SS_SI, SSSuit_Data, by = c("Unit","Spp"))
SS_SI2 <- distinct(SS_SI2)
Spp_count2 <- SS_SI2 %>%
group_by(Spp) %>%
summarise(count = n())
View(Spp_count2)
Spp.list <- Spp_count2$Spp [Spp_count2$count >10] ###list of species where there are more than 5 values
SS_SI2 <- SS_SI2[!is.na(SS_SI2$SI),]
library(rJava)
options(java.parameters = "-Xmx8000m")
library(bartMachine)
set_bart_machine_num_cores(5)
BFMods <- foreach(Spp = Spp.list, .combine = c)  %do% {
SI_Spp <- SS_SI2 [(SS_SI2$Spp %in% Spp), ]
SI_Spp <- SI_Spp[,-c(4,1,2,5)]
rownames(SI_Spp) <- NULL
bF.fit <- bartMachine(SI_Spp[,-1],SI_Spp$SI, k = 2, nu = 3, q = 0.99, num_trees = 200)
list(bF.fit)
}
